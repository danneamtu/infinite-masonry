{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danneamtu/Documents/websites/components/infinite-masonry/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Masonry from 'react-masonry-css';\nimport API from './API';\nimport Image from './Image';\nlet pageNum = 1;\n\nfunction App() {\n  _s();\n\n  const [imageArray, setImageArray] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n\n  const fetchImages = pageNumber => {\n    API.get('/', {\n      params: {\n        page: pageNumber\n      }\n    }).then(res => {\n      setImageArray([...imageArray, res.data.hits]);\n      setTotalPages([res.data.totalHits / res.data.hits.length]);\n    }).catch(err => {\n      throw new Error('Ups, find an error while reading the data');\n    });\n  };\n\n  useEffect(() => {\n    fetchImages(pageNum);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      children: [/*#__PURE__*/_jsxDEV(Masonry, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lf8NpZDVpc01FLTSK6079Mbm38g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/danneamtu/Documents/websites/components/infinite-masonry/src/App.js"],"names":["React","useState","useEffect","InfiniteScroll","Masonry","API","Image","pageNum","App","imageArray","setImageArray","totalPages","setTotalPages","fetchImages","pageNumber","get","params","page","then","res","data","hits","totalHits","length","catch","err","Error"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAGA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAIC,OAAO,GAAG,CAAd;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMY,WAAW,GAAGC,UAAU,IAAI;AAChCT,IAAAA,GAAG,CAACU,GAAJ,CAAQ,GAAR,EAAa;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,IAAI,EAACH;AAAN;AAAT,KAAb,EACCI,IADD,CACMC,GAAG,IAAE;AACTT,MAAAA,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgBU,GAAG,CAACC,IAAJ,CAASC,IAAzB,CAAD,CAAb;AACAT,MAAAA,aAAa,CAAC,CAACO,GAAG,CAACC,IAAJ,CAASE,SAAT,GAAqBH,GAAG,CAACC,IAAJ,CAASC,IAAT,CAAcE,MAApC,CAAD,CAAb;AACD,KAJD,EAKCC,KALD,CAKOC,GAAG,IAAG;AAAC,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AAA6D,KAL3E;AAMD,GAPD;;AASAxB,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,WAAW,CAACN,OAAD,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,cAAD;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzBQC,G;;KAAAA,G;AA2BT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Masonry from 'react-masonry-css';\n\n\nimport API from './API'; \nimport Image from './Image';\n\nlet pageNum = 1;\nfunction App() { \n  const [imageArray, setImageArray] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n\n  const fetchImages = pageNumber => {\n    API.get('/', {params: {page:pageNumber}})\n    .then(res=>{\n      setImageArray([...imageArray, res.data.hits])\n      setTotalPages([res.data.totalHits / res.data.hits.length])\n    })\n    .catch(err=> {throw new Error('Ups, find an error while reading the data')})\n  }\n\n  useEffect(()=>{\n    fetchImages(pageNum);\n  }, [])\n\n  return ( \n    <div className=\"App\">\n      <InfiniteScroll>\n        <Masonry></Masonry>\n        <Image />\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}