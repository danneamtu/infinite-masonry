{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danneamtu/Documents/websites/components/infinite-masonry/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Masonry from 'react-masonry-css';\nimport API from './API';\nimport Image from './Image';\nlet pageNum = 1;\n\nfunction App() {\n  _s();\n\n  const [imageArray, setImageArray] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n\n  const fetchImages = pageNumber => {\n    API.get('/', {\n      params: {\n        page: pageNumber\n      }\n    }).then(res => {\n      setImageArray([...imageArray, ...res.data.hits]);\n      setTotalPages([res.data.totalHits / res.data.hits.length]);\n    }).catch(err => {\n      throw new Error('Ups, find an error while reading the data');\n    });\n  };\n\n  useEffect(() => {\n    fetchImages(pageNum);\n  }, []);\n  const breakpoints = {\n    default: 6,\n    1200: 4,\n    992: 3,\n    768: 2,\n    576: 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: () => {\n        fetchImages(++pageNum);\n      },\n      hasMore: pageNum < totalPages ? true : false,\n      children: /*#__PURE__*/_jsxDEV(Masonry, {\n        className: \"masonry-grid\",\n        columnClassName: \"masonry-grid_column\",\n        breakpointCols: breakpoints,\n        children: imageArray.map(image => /*#__PURE__*/_jsxDEV(Image, { ...image\n        }, image.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lf8NpZDVpc01FLTSK6079Mbm38g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/danneamtu/Documents/websites/components/infinite-masonry/src/App.js"],"names":["React","useState","useEffect","InfiniteScroll","Masonry","API","Image","pageNum","App","imageArray","setImageArray","totalPages","setTotalPages","fetchImages","pageNumber","get","params","page","then","res","data","hits","totalHits","length","catch","err","Error","breakpoints","default","map","image","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAGA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAIC,OAAO,GAAG,CAAd;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMY,WAAW,GAAGC,UAAU,IAAI;AAChCT,IAAAA,GAAG,CAACU,GAAJ,CAAQ,GAAR,EAAa;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,IAAI,EAACH;AAAN;AAAT,KAAb,EACCI,IADD,CACMC,GAAG,IAAE;AACTT,MAAAA,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgB,GAAGU,GAAG,CAACC,IAAJ,CAASC,IAA5B,CAAD,CAAb;AACAT,MAAAA,aAAa,CAAC,CAACO,GAAG,CAACC,IAAJ,CAASE,SAAT,GAAqBH,GAAG,CAACC,IAAJ,CAASC,IAAT,CAAcE,MAApC,CAAD,CAAb;AACD,KAJD,EAKCC,KALD,CAKOC,GAAG,IAAG;AAAC,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AAA6D,KAL3E;AAMD,GAPD;;AASAxB,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,WAAW,CAACN,OAAD,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMoB,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE,CADS;AAElB,UAAM,CAFY;AAGlB,SAAK,CAHa;AAIlB,SAAK,CAJa;AAKlB,SAAK;AALa,GAApB;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,cAAD;AACE,MAAA,SAAS,EAAE,CADb;AAEE,MAAA,QAAQ,EAAE,MAAI;AACZf,QAAAA,WAAW,CAAC,EAAEN,OAAH,CAAX;AACC,OAJL;AAME,MAAA,OAAO,EACJA,OAAO,GAAGI,UAAV,GAAuB,IAAvB,GAA8B,KAPnC;AAAA,6BASE,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,cAAnB;AAAkC,QAAA,eAAe,EAAC,qBAAlD;AAAwE,QAAA,cAAc,EAAEgB,WAAxF;AAAA,kBAEMlB,UAAU,CAACoB,GAAX,CAAgBC,KAAD,iBACb,QAAC,KAAD,OAA0BA;AAA1B,WAAYA,KAAK,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,gBADF;AAFN;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA9CQvB,G;;KAAAA,G;AAgDT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';             \nimport Masonry from 'react-masonry-css';\n\n\nimport API from './API'; \nimport Image from './Image';\n\nlet pageNum = 1;\nfunction App() { \n  const [imageArray, setImageArray] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n\n  const fetchImages = pageNumber => {\n    API.get('/', {params: {page:pageNumber}})\n    .then(res=>{\n      setImageArray([...imageArray, ...res.data.hits])\n      setTotalPages([res.data.totalHits / res.data.hits.length])\n    })\n    .catch(err=> {throw new Error('Ups, find an error while reading the data')})\n  }\n\n  useEffect(()=>{\n    fetchImages(pageNum);\n  }, [])\n\n  const breakpoints = {\n    default: 6,\n    1200: 4,\n    992: 3,\n    768: 2,\n    576: 1\n  }\n  return ( \n    <div className=\"App\">\n      <InfiniteScroll \n        pageStart={0} \n        loadMore={()=>{\n          fetchImages(++pageNum)\n          }\n        } \n        hasMore={\n           pageNum < totalPages ? true : false\n        }>\n        <Masonry className='masonry-grid' columnClassName='masonry-grid_column' breakpointCols={breakpoints} >\n        {\n              imageArray.map((image)=>(\n                <Image key={image.id} {...image} />\n            ))\n           }\n          \n        </Masonry>\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}